import tableprint as tp

M = [[10, 6, 3, 2],
[10, 5, 4, 8],
[7, 7, 2, 3],
[2, 5, 9, 3],
[1, 4, 2, 8],
[8, 5, 3, 10],
[3, 4, 5, 13],
[5, 2, 8, 4]]

A=0.6
P = [0.1, 0.4, 0.4, 0.1]

def vald (M) :
    a = []
    for i in range (len(M)):
        a.append(min(M[i]))
    ai = ['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8']
    tp.banner ("Критерий Вальда ", width=19)
    tp.table([[ai[i], a[i]] for i in range(len(a))], ['ai', 'min gij'])
    print ("Оптимальное решение по критерию Вальда:", a.index (max (a) ) +1)
    return a.index (max(a))+1

def sevidz (M) :
    b = [-float('inf'), -float('inf'), -float ('inf'), -float('inf') ]
    for j in range (len (M[0])):
        for i in range (len(M)):
            b[j] = M[i][j] if M[i][j] > b[j] else b[j]
    R = []
    for i in range (len(M)):
        R.append([])
        for j in range (len(M[0])):
            R[i].append(b[j] - M[i][j])
    r = []
    ri = []
    for i in range (len (M)):
        r.append(max(R[i]))
        ri.append(f'b{i+1}')
    tp.banner("Критерий Сэвиджа ", width=19)
    tp.table([b], ['b1', 'b2', 'b3', 'b4'])
    tp.table(R, ['', 'R', '=', ''])
    tp.table([[ri[i], r[i]] for i in range (len(r))], ['bi', 'max rij'])
    print ("Оптимальное решение по критерию Сэвиджа:", r.index (min(r))+1)
    return r.index(min(r))+1

def gurviz (M, A) :
    g = []
    gi = []
    for i in range (len (M)):
        g.append (A * min(M[i]) + (1 - A) * max(M[i]))
        gi.append(f"g{i + 1}")
    tp.banner("Критерий Гурвица ", width=18)
    tp.table([(gi[i], g[i]) for i in range (len(g))], ['gi', ''])
    print ("Оптимальное решение по критерию Гурвица:", g.index (max(g))+1)
    return g.index(max(g))+1

def baies(M, P):
    d = []
    di = []
    for i in range (len(M)):
        d.append (sum([M[i][0] * P[0],
            M[i][1] * P[1],
            M[i][2] * p[2],
            M[i][3] * P[3]]))
        di.append(f"d{i+1}")
    tp.banner("Критерий Байеса ", width=19)
    tp.table([[di[i], d[i] ]for i in range (len(d))], ['di', ''])
    print ("Оптимальное решение по критерию Байеса:", d.index (max(d))+1)
    return d.index(max(d))+1

def laplas (M) :
    f = []
    fi = []
    for i in range (len(M)):
        f.append(sum(M[i])/len(M[i]))
        fi. append (f"f{i+1}")
    tp.banner("Критерий Лапласа ", width=18)
    tp.table([[fi[i], f[i]] for i in range (len(f))], ['fi', ''])
    print ("Оптимальное решение по критерию Лапласа:", f.index (max(f))+1)
    return f.index(max(f))+1

def matrix(M, a) :
    rows = []
    m = [-1, -1]
    for i in range (len(M)) :
        t = [1 if a[j] == i + 1 else 0 for j in range (len(a))]
        rows.append([f"x{i+1}"])
        for j in range (len(a)):
             rows[i].append(t[j])
        rows[i].append(sum(t))
        if m[1] < sum(t) :
            m[1] = sum(t)
            m[0] = i + 1
    tp.banner("Матрица голосования ", width=21)
    tp.table(rows, ['', 'Baльд', 'Сэвидж', 'Гурвиц', 'Байес', 'Лаплас',
'Итог'])
             
t = True
while t:
    print("1 - Критерий Вальда")
    print ("2 - Критерий Сэвиджа")
    print("3 - Критерий Гурвица")
    print("4 - Критерий Байеса")
    print("5 - Критерий Лапласа")
    print ("0 - Все критерии")
    r = int (input(" -- > "))
    if r >= 0 and r < 6:
        t = False
    else:
        continue
    if r == 0:
        matrix(M, [vald(M), sevidz(M), gurviz(N, A), baies(M, P) , laplas(M)])
    elif r == 1:
        vald (M)
    elif r == 2:
        sevidz(M)
    elif r == 3:
        gurviz(M, A)
    elif r == 4:
        baies(M, P)
    elif r == 5:
        laplas(M)